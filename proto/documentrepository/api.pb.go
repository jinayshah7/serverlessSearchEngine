// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Query_Type int32

const (
	Query_MATCH  Query_Type = 0
	Query_PHRASE Query_Type = 1
)

var Query_Type_name = map[int32]string{
	0: "MATCH",
	1: "PHRASE",
}

var Query_Type_value = map[string]int32{
	"MATCH":  0,
	"PHRASE": 1,
}

func (x Query_Type) String() string {
	return proto.EnumName(Query_Type_name, int32(x))
}

func (Query_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1, 0}
}

// Document represents an indexed document.
type Document struct {
	LinkId               []byte               `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	Url                  string               `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title                string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content              string               `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	IndexedAt            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=indexed_at,json=indexedAt,proto3" json:"indexed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Document) Reset()         { *m = Document{} }
func (m *Document) String() string { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()    {}
func (*Document) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Document) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Document.Unmarshal(m, b)
}
func (m *Document) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Document.Marshal(b, m, deterministic)
}
func (m *Document) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Document.Merge(m, src)
}
func (m *Document) XXX_Size() int {
	return xxx_messageInfo_Document.Size(m)
}
func (m *Document) XXX_DiscardUnknown() {
	xxx_messageInfo_Document.DiscardUnknown(m)
}

var xxx_messageInfo_Document proto.InternalMessageInfo

func (m *Document) GetLinkId() []byte {
	if m != nil {
		return m.LinkId
	}
	return nil
}

func (m *Document) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Document) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Document) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Document) GetIndexedAt() *timestamp.Timestamp {
	if m != nil {
		return m.IndexedAt
	}
	return nil
}

// Query represents a search query.
type Query struct {
	Type                 Query_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.Query_Type" json:"type,omitempty"`
	Expression           string     `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	Offset               uint64     `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetType() Query_Type {
	if m != nil {
		return m.Type
	}
	return Query_MATCH
}

func (m *Query) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *Query) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// QueryResult contains either the total count of results for a query or a
// single document from the resultset.
type QueryResult struct {
	// Types that are valid to be assigned to Result:
	//	*QueryResult_DocCount
	//	*QueryResult_Doc
	Result               isQueryResult_Result `protobuf_oneof:"result"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *QueryResult) Reset()         { *m = QueryResult{} }
func (m *QueryResult) String() string { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()    {}
func (*QueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *QueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResult.Unmarshal(m, b)
}
func (m *QueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResult.Marshal(b, m, deterministic)
}
func (m *QueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResult.Merge(m, src)
}
func (m *QueryResult) XXX_Size() int {
	return xxx_messageInfo_QueryResult.Size(m)
}
func (m *QueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResult proto.InternalMessageInfo

type isQueryResult_Result interface {
	isQueryResult_Result()
}

type QueryResult_DocCount struct {
	DocCount uint64 `protobuf:"varint,1,opt,name=doc_count,json=docCount,proto3,oneof"`
}

type QueryResult_Doc struct {
	Doc *Document `protobuf:"bytes,2,opt,name=doc,proto3,oneof"`
}

func (*QueryResult_DocCount) isQueryResult_Result() {}

func (*QueryResult_Doc) isQueryResult_Result() {}

func (m *QueryResult) GetResult() isQueryResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *QueryResult) GetDocCount() uint64 {
	if x, ok := m.GetResult().(*QueryResult_DocCount); ok {
		return x.DocCount
	}
	return 0
}

func (m *QueryResult) GetDoc() *Document {
	if x, ok := m.GetResult().(*QueryResult_Doc); ok {
		return x.Doc
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryResult_DocCount)(nil),
		(*QueryResult_Doc)(nil),
	}
}

// UpdateScoreRequest encapsulates the parameters for the UpdateScore RPC.
type UpdateScoreRequest struct {
	LinkId               []byte   `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	PageRankScore        float64  `protobuf:"fixed64,2,opt,name=page_rank_score,json=pageRankScore,proto3" json:"page_rank_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateScoreRequest) Reset()         { *m = UpdateScoreRequest{} }
func (m *UpdateScoreRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateScoreRequest) ProtoMessage()    {}
func (*UpdateScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *UpdateScoreRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateScoreRequest.Unmarshal(m, b)
}
func (m *UpdateScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateScoreRequest.Marshal(b, m, deterministic)
}
func (m *UpdateScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateScoreRequest.Merge(m, src)
}
func (m *UpdateScoreRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateScoreRequest.Size(m)
}
func (m *UpdateScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateScoreRequest proto.InternalMessageInfo

func (m *UpdateScoreRequest) GetLinkId() []byte {
	if m != nil {
		return m.LinkId
	}
	return nil
}

func (m *UpdateScoreRequest) GetPageRankScore() float64 {
	if m != nil {
		return m.PageRankScore
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.Query_Type", Query_Type_name, Query_Type_value)
	proto.RegisterType((*Document)(nil), "proto.Document")
	proto.RegisterType((*Query)(nil), "proto.Query")
	proto.RegisterType((*QueryResult)(nil), "proto.QueryResult")
	proto.RegisterType((*UpdateScoreRequest)(nil), "proto.UpdateScoreRequest")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0xc4, 0x76, 0xe3, 0x71, 0xa1, 0x61, 0x84, 0x8a, 0x31, 0x2a, 0x44, 0x46, 0xa0,
	0x20, 0x21, 0x17, 0x85, 0x13, 0x37, 0x42, 0xa9, 0x94, 0x1e, 0x90, 0x60, 0x93, 0x9e, 0x38, 0x58,
	0xae, 0x3d, 0x09, 0x56, 0x1c, 0xef, 0xb2, 0x5e, 0x4b, 0xc9, 0x03, 0xf0, 0x1e, 0x1c, 0x79, 0x4c,
	0xe4, 0xb5, 0x23, 0x45, 0xa9, 0xc4, 0xc9, 0xfb, 0xff, 0x33, 0x3b, 0xf3, 0x79, 0x66, 0xc1, 0x4d,
	0x64, 0x1e, 0x49, 0x25, 0xb4, 0x40, 0xdb, 0x7c, 0x82, 0x97, 0x2b, 0x21, 0x56, 0x05, 0x5d, 0x1a,
	0x75, 0x57, 0x2f, 0x2f, 0x75, 0xbe, 0xa1, 0x4a, 0x27, 0x1b, 0xd9, 0xe6, 0x05, 0xcf, 0x8f, 0x13,
	0x68, 0x23, 0xf5, 0xae, 0x0d, 0x86, 0x7f, 0x18, 0x0c, 0xbe, 0x88, 0xb4, 0xde, 0x50, 0xa9, 0xf1,
	0x29, 0x9c, 0x14, 0x79, 0xb9, 0x8e, 0xf3, 0xcc, 0x67, 0x23, 0x36, 0x3e, 0xe5, 0x4e, 0x23, 0x6f,
	0x32, 0x1c, 0x42, 0xbf, 0x56, 0x85, 0xff, 0x60, 0xc4, 0xc6, 0x2e, 0x6f, 0x8e, 0xf8, 0x04, 0x6c,
	0x9d, 0xeb, 0x82, 0xfc, 0xbe, 0xf1, 0x5a, 0x81, 0x3e, 0x9c, 0xa4, 0xa2, 0xd4, 0x54, 0x6a, 0xdf,
	0x32, 0xfe, 0x5e, 0xe2, 0x47, 0x80, 0xbc, 0xcc, 0x68, 0x4b, 0x59, 0x9c, 0x68, 0xdf, 0x1e, 0xb1,
	0xb1, 0x37, 0x09, 0xa2, 0x96, 0x2c, 0xda, 0x93, 0x45, 0x8b, 0x3d, 0x3a, 0x77, 0xbb, 0xec, 0xa9,
	0x0e, 0x7f, 0x33, 0xb0, 0xbf, 0xd7, 0xa4, 0x76, 0xf8, 0x1a, 0x2c, 0xbd, 0x93, 0x64, 0xe0, 0x1e,
	0x4d, 0x1e, 0xb7, 0xf7, 0x22, 0x13, 0x8b, 0x16, 0x3b, 0x49, 0xdc, 0x84, 0xf1, 0x05, 0x00, 0x6d,
	0xa5, 0xa2, 0xaa, 0xca, 0x45, 0xd9, 0x41, 0x1f, 0x38, 0x78, 0x0e, 0x8e, 0x58, 0x2e, 0x2b, 0xd2,
	0x06, 0xde, 0xe2, 0x9d, 0x0a, 0x2f, 0xc0, 0x6a, 0xaa, 0xa0, 0x0b, 0xf6, 0xd7, 0xe9, 0xe2, 0x6a,
	0x36, 0xec, 0x21, 0x80, 0xf3, 0x6d, 0xc6, 0xa7, 0xf3, 0xeb, 0x21, 0x0b, 0x7f, 0x80, 0x67, 0x5a,
	0x71, 0xaa, 0xea, 0x42, 0xe3, 0x05, 0xb8, 0x99, 0x48, 0xe3, 0x54, 0xd4, 0xa5, 0x36, 0x44, 0xd6,
	0xac, 0xc7, 0x07, 0x99, 0x48, 0xaf, 0x1a, 0x07, 0x5f, 0x41, 0x3f, 0x13, 0xa9, 0xe9, 0xee, 0x4d,
	0xce, 0x3a, 0xd4, 0xfd, 0xa4, 0x67, 0x3d, 0xde, 0x44, 0x3f, 0x0f, 0xc0, 0x51, 0xa6, 0x5a, 0x78,
	0x0b, 0x78, 0x2b, 0xb3, 0x44, 0xd3, 0x3c, 0x15, 0x8a, 0x38, 0xfd, 0xaa, 0xa9, 0xfa, 0xcf, 0x42,
	0xde, 0xc0, 0x99, 0x4c, 0x56, 0x14, 0xab, 0xa4, 0x5c, 0xc7, 0x55, 0x73, 0xc5, 0x74, 0x62, 0xfc,
	0x61, 0x63, 0xf3, 0xa4, 0x5c, 0x9b, 0x3a, 0x93, 0xbf, 0x0c, 0xbc, 0x05, 0x6d, 0xf5, 0x8d, 0x99,
	0xa6, 0xc2, 0xb7, 0x60, 0x9b, 0x23, 0x1e, 0x13, 0x05, 0xc7, 0x06, 0xbe, 0x03, 0x67, 0x4e, 0x89,
	0x4a, 0x7f, 0xe2, 0xe9, 0xe1, 0xa0, 0x03, 0x3c, 0x54, 0xed, 0x2c, 0xde, 0x33, 0xfc, 0x04, 0xde,
	0x01, 0x3f, 0x3e, 0xeb, 0x92, 0xee, 0xff, 0x53, 0x70, 0x7e, 0x6f, 0xeb, 0xd7, 0xcd, 0x7b, 0xbc,
	0x73, 0x8c, 0xfe, 0xf0, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xe2, 0xc2, 0xc9, 0xe2, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TextIndexerClient is the client API for TextIndexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TextIndexerClient interface {
	// Index inserts a new document to the index or updates the index entry for
	// and existing document.
	Index(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Document, error)
	// Search the index for a particular query and stream the results back to
	// the client. The first response will include the total result count while
	// all subsequent responses will include documents from the resultset.
	Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (TextIndexer_SearchClient, error)
	// UpdateScore updates the PageRank score for a document with the specified
	// link ID.
	UpdateScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type textIndexerClient struct {
	cc *grpc.ClientConn
}

func NewTextIndexerClient(cc *grpc.ClientConn) TextIndexerClient {
	return &textIndexerClient{cc}
}

func (c *textIndexerClient) Index(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/proto.TextIndexer/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textIndexerClient) Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (TextIndexer_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TextIndexer_serviceDesc.Streams[0], "/proto.TextIndexer/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &textIndexerSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextIndexer_SearchClient interface {
	Recv() (*QueryResult, error)
	grpc.ClientStream
}

type textIndexerSearchClient struct {
	grpc.ClientStream
}

func (x *textIndexerSearchClient) Recv() (*QueryResult, error) {
	m := new(QueryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *textIndexerClient) UpdateScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.TextIndexer/UpdateScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextIndexerServer is the server API for TextIndexer service.
type TextIndexerServer interface {
	// Index inserts a new document to the index or updates the index entry for
	// and existing document.
	Index(context.Context, *Document) (*Document, error)
	// Search the index for a particular query and stream the results back to
	// the client. The first response will include the total result count while
	// all subsequent responses will include documents from the resultset.
	Search(*Query, TextIndexer_SearchServer) error
	// UpdateScore updates the PageRank score for a document with the specified
	// link ID.
	UpdateScore(context.Context, *UpdateScoreRequest) (*empty.Empty, error)
}

// UnimplementedTextIndexerServer can be embedded to have forward compatible implementations.
type UnimplementedTextIndexerServer struct {
}

func (*UnimplementedTextIndexerServer) Index(ctx context.Context, req *Document) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (*UnimplementedTextIndexerServer) Search(req *Query, srv TextIndexer_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedTextIndexerServer) UpdateScore(ctx context.Context, req *UpdateScoreRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScore not implemented")
}

func RegisterTextIndexerServer(s *grpc.Server, srv TextIndexerServer) {
	s.RegisterService(&_TextIndexer_serviceDesc, srv)
}

func _TextIndexer_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextIndexerServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TextIndexer/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextIndexerServer).Index(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextIndexer_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextIndexerServer).Search(m, &textIndexerSearchServer{stream})
}

type TextIndexer_SearchServer interface {
	Send(*QueryResult) error
	grpc.ServerStream
}

type textIndexerSearchServer struct {
	grpc.ServerStream
}

func (x *textIndexerSearchServer) Send(m *QueryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _TextIndexer_UpdateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextIndexerServer).UpdateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TextIndexer/UpdateScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextIndexerServer).UpdateScore(ctx, req.(*UpdateScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TextIndexer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TextIndexer",
	HandlerType: (*TextIndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _TextIndexer_Index_Handler,
		},
		{
			MethodName: "UpdateScore",
			Handler:    _TextIndexer_UpdateScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _TextIndexer_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
